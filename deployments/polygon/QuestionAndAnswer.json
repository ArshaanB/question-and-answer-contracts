{
  "address": "0xbE4F9a902C8DA1731A9E984C519b46AD1cBD9d15",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "USDCAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "QuestionAndAnswer__AllowanceTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QuestionAndAnswer__BountyTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QuestionAndAnswer__CannotCancelQuestion",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QuestionAndAnswer__InvalidExpiry",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QuestionAndAnswer__InvalidPriceMinimum",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QuestionAndAnswer__NothingToWithdraw",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QuestionAndAnswer__QuestionAlreadyAnswered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QuestionAndAnswer__QuestionDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QuestionAndAnswer__QuestionHasExpired",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawalBy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "questioner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "answerer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bounty",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "answer",
          "type": "string"
        }
      ],
      "name": "QuestionAnswered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "questioner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "answerer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bounty",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "question",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiryDate",
          "type": "uint256"
        }
      ],
      "name": "QuestionAsked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "questioner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "answerer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        }
      ],
      "name": "QuestionCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawalBy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "questioner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "answer",
          "type": "string"
        }
      ],
      "name": "answerQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "answererToSettings",
      "outputs": [
        {
          "internalType": "bool",
          "name": "populated",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "priceMinimum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawableAmount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "interests",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "answererWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "question",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "answerer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "bounty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiryDate",
          "type": "uint256"
        }
      ],
      "name": "askQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "answerer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "cancelQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "questioner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "answerer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getQuestionerToAnswererToQAs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "priceMinimum",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "interests",
          "type": "string"
        }
      ],
      "name": "setAnswererSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3508a225d2b9d36919c466e4c54e8a6c3e971e6cca3e855b9eabe923262f4e83",
  "receipt": {
    "to": null,
    "from": "0x27f940eb8fa6740e38a20214592cECE329BDe8Df",
    "contractAddress": "0xbE4F9a902C8DA1731A9E984C519b46AD1cBD9d15",
    "transactionIndex": 137,
    "gasUsed": "2167994",
    "logsBloom": "0x
    "blockHash": "0xabf333aee4c33b4ca419cf979f05d968338837c0ecddf3d13d60d4d560f64a78",
    "transactionHash": "0x3508a225d2b9d36919c466e4c54e8a6c3e971e6cca3e855b9eabe923262f4e83",
    "logs": [
      {
        "transactionIndex": 137,
        "blockNumber": 34184192,
        "transactionHash": "0x3508a225d2b9d36919c466e4c54e8a6c3e971e6cca3e855b9eabe923262f4e83",
        "address": "0xbE4F9a902C8DA1731A9E984C519b46AD1cBD9d15",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000027f940eb8fa6740e38a20214592cece329bde8df"
        ],
        "data": "0x",
        "logIndex": 659,
        "blockHash": "0xabf333aee4c33b4ca419cf979f05d968338837c0ecddf3d13d60d4d560f64a78"
      },
      {
        "transactionIndex": 137,
        "blockNumber": 34184192,
        "transactionHash": "0x3508a225d2b9d36919c466e4c54e8a6c3e971e6cca3e855b9eabe923262f4e83",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000027f940eb8fa6740e38a20214592cece329bde8df",
          "0x000000000000000000000000f0245f6251bef9447a08766b9da2b07b28ad80b0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000e7115f275af8000000000000000000000000000000000000000000000000008ac7230489e800000000000000000000000000000000000000000000000006a7e3d069f5940c857100000000000000000000000000000000000000000000000089e011a5628d08000000000000000000000000000000000000000000000006a7e4b77b54bb677d71",
        "logIndex": 660,
        "blockHash": "0xabf333aee4c33b4ca419cf979f05d968338837c0ecddf3d13d60d4d560f64a78"
      }
    ],
    "blockNumber": 34184192,
    "cumulativeGasUsed": "23552019",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174"
  ],
  "numDeployments": 1,
  "solcInputHash": "bc23e815730017ed58f30605e21cbb0a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"USDCAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"QuestionAndAnswer__AllowanceTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuestionAndAnswer__BountyTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuestionAndAnswer__CannotCancelQuestion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuestionAndAnswer__InvalidExpiry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuestionAndAnswer__InvalidPriceMinimum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuestionAndAnswer__NothingToWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuestionAndAnswer__QuestionAlreadyAnswered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuestionAndAnswer__QuestionDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuestionAndAnswer__QuestionHasExpired\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawalBy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"questioner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"answerer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"answer\",\"type\":\"string\"}],\"name\":\"QuestionAnswered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"questioner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"answerer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"question\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiryDate\",\"type\":\"uint256\"}],\"name\":\"QuestionAsked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"questioner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"answerer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"QuestionCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawalBy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"questioner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"answer\",\"type\":\"string\"}],\"name\":\"answerQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"answererToSettings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"populated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"priceMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawableAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"interests\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"answererWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"question\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"answerer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryDate\",\"type\":\"uint256\"}],\"name\":\"askQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"answerer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"cancelQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"questioner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"answerer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getQuestionerToAnswererToQAs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priceMinimum\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"interests\",\"type\":\"string\"}],\"name\":\"setAnswererSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/QuestionAndAnswer.sol\":\"QuestionAndAnswer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/QuestionAndAnswer.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nerror QuestionAndAnswer__BountyTooLow();\\nerror QuestionAndAnswer__InvalidPriceMinimum();\\nerror QuestionAndAnswer__AllowanceTooLow();\\nerror QuestionAndAnswer__InvalidExpiry();\\nerror QuestionAndAnswer__QuestionDoesNotExist();\\nerror QuestionAndAnswer__QuestionAlreadyAnswered();\\nerror QuestionAndAnswer__QuestionHasExpired();\\nerror QuestionAndAnswer__CannotCancelQuestion();\\nerror QuestionAndAnswer__NothingToWithdraw();\\n\\ncontract QuestionAndAnswer is Ownable {\\n    event QuestionAsked(\\n        address indexed questioner,\\n        address indexed answerer,\\n        uint256 indexed questionId,\\n        uint256 bounty,\\n        uint256 date,\\n        string question,\\n        uint256 expiryDate\\n    );\\n    event QuestionAnswered(\\n        address indexed questioner,\\n        address indexed answerer,\\n        uint256 indexed questionId,\\n        uint256 bounty,\\n        uint256 date,\\n        string answer\\n    );\\n    event QuestionCanceled(\\n        address indexed questioner,\\n        address indexed answerer,\\n        uint256 indexed questionId,\\n        uint256 date\\n    );\\n    event Withdraw(address indexed withdrawalBy, uint256 indexed amount);\\n    event EmergencyWithdraw(\\n        address indexed withdrawalBy,\\n        uint256 indexed amount\\n    );\\n\\n    // For now, this is the only accepted currency.\\n    address immutable i_USDC_ADDRESS;\\n\\n    struct AnswererSettings {\\n        bool populated;\\n        uint256 priceMinimum;\\n        uint256 withdrawableAmount;\\n        string interests;\\n    }\\n    struct QuestionAnswerDetails {\\n        string question;\\n        string answer;\\n        bool answered;\\n        uint256 bounty;\\n        uint256 id;\\n        uint256 expiryDate;\\n    }\\n    mapping(address => AnswererSettings) public answererToSettings;\\n    mapping(address => mapping(address => QuestionAnswerDetails[]))\\n        private questionerToAnswererToQAs;\\n\\n    constructor(address USDCAddress) {\\n        i_USDC_ADDRESS = USDCAddress;\\n    }\\n\\n    function setAnswererSettings(\\n        uint256 priceMinimum,\\n        string calldata interests\\n    ) public {\\n        if (priceMinimum < 0) {\\n            revert QuestionAndAnswer__InvalidPriceMinimum();\\n        }\\n\\n        answererToSettings[msg.sender].populated = true;\\n        answererToSettings[msg.sender].priceMinimum = priceMinimum;\\n        answererToSettings[msg.sender].interests = interests;\\n    }\\n\\n    function askQuestion(\\n        string calldata question,\\n        address answerer,\\n        uint256 bounty,\\n        uint256 expiryDate\\n    ) public {\\n        AnswererSettings memory answererSettings = answererToSettings[answerer];\\n\\n        if (\\n            answererSettings.populated && bounty < answererSettings.priceMinimum\\n        ) {\\n            revert QuestionAndAnswer__BountyTooLow();\\n        }\\n\\n        IERC20 paymentTokenERC20 = IERC20(i_USDC_ADDRESS);\\n        if (paymentTokenERC20.allowance(msg.sender, address(this)) < bounty) {\\n            revert QuestionAndAnswer__AllowanceTooLow();\\n        }\\n\\n        if (expiryDate <= block.timestamp) {\\n            revert QuestionAndAnswer__InvalidExpiry();\\n        }\\n\\n        QuestionAnswerDetails[]\\n            memory questionAnswerDetails = questionerToAnswererToQAs[\\n                msg.sender\\n            ][answerer];\\n        QuestionAnswerDetails\\n            memory newQuestionAnswerDetails = QuestionAnswerDetails({\\n                question: question,\\n                answer: \\\"\\\",\\n                answered: false,\\n                bounty: bounty,\\n                id: 0,\\n                expiryDate: expiryDate\\n            });\\n        if (questionAnswerDetails.length != 0) {\\n            newQuestionAnswerDetails.id =\\n                questionAnswerDetails[questionAnswerDetails.length - 1].id +\\n                1;\\n        }\\n        questionerToAnswererToQAs[msg.sender][answerer].push(\\n            newQuestionAnswerDetails\\n        );\\n\\n        emit QuestionAsked(\\n            msg.sender,\\n            answerer,\\n            newQuestionAnswerDetails.id,\\n            bounty,\\n            block.timestamp,\\n            question,\\n            expiryDate\\n        );\\n    }\\n\\n    function answerQuestion(\\n        address questioner,\\n        uint256 questionId,\\n        string calldata answer\\n    ) public {\\n        QuestionAnswerDetails[]\\n            storage allQuestionAnswerDetails = questionerToAnswererToQAs[\\n                questioner\\n            ][msg.sender];\\n        if (allQuestionAnswerDetails.length <= questionId) {\\n            revert QuestionAndAnswer__QuestionDoesNotExist();\\n        }\\n        if (allQuestionAnswerDetails[questionId].answered) {\\n            revert QuestionAndAnswer__QuestionAlreadyAnswered();\\n        }\\n        if (\\n            allQuestionAnswerDetails[questionId].expiryDate <= block.timestamp\\n        ) {\\n            revert QuestionAndAnswer__QuestionHasExpired();\\n        }\\n\\n        allQuestionAnswerDetails[questionId].answer = answer;\\n        allQuestionAnswerDetails[questionId].answered = true;\\n        uint256 bountyToCollect = allQuestionAnswerDetails[questionId].bounty;\\n\\n        emit QuestionAnswered(\\n            questioner,\\n            msg.sender,\\n            questionId,\\n            bountyToCollect,\\n            block.timestamp,\\n            answer\\n        );\\n\\n        IERC20 paymentTokenERC20 = IERC20(i_USDC_ADDRESS);\\n        paymentTokenERC20.transferFrom(\\n            questioner,\\n            address(this),\\n            bountyToCollect\\n        );\\n\\n        answererToSettings[msg.sender].withdrawableAmount += bountyToCollect;\\n    }\\n\\n    function cancelQuestion(address answerer, uint256 questionId) public {\\n        QuestionAnswerDetails[]\\n            storage allQuestionAnswerDetails = questionerToAnswererToQAs[\\n                msg.sender\\n            ][answerer];\\n        if (allQuestionAnswerDetails.length <= questionId) {\\n            revert QuestionAndAnswer__QuestionDoesNotExist();\\n        }\\n        if (allQuestionAnswerDetails[questionId].answered) {\\n            revert QuestionAndAnswer__QuestionAlreadyAnswered();\\n        }\\n        if (\\n            allQuestionAnswerDetails[questionId].expiryDate <= block.timestamp\\n        ) {\\n            revert QuestionAndAnswer__QuestionHasExpired();\\n        }\\n        if (\\n            allQuestionAnswerDetails[questionId].expiryDate <=\\n            block.timestamp + 5 minutes\\n        ) {\\n            revert QuestionAndAnswer__CannotCancelQuestion();\\n        }\\n\\n        allQuestionAnswerDetails[questionId].expiryDate = block.timestamp - 1;\\n\\n        emit QuestionCanceled(\\n            msg.sender,\\n            answerer,\\n            questionId,\\n            block.timestamp - 1\\n        );\\n    }\\n\\n    function answererWithdraw() public {\\n        AnswererSettings storage answererSettings = answererToSettings[\\n            msg.sender\\n        ];\\n        if (answererSettings.withdrawableAmount <= 0) {\\n            revert QuestionAndAnswer__NothingToWithdraw();\\n        }\\n\\n        uint256 withdrawableAmount = answererSettings.withdrawableAmount;\\n        IERC20 paymentTokenERC20 = IERC20(i_USDC_ADDRESS);\\n\\n        answererSettings.withdrawableAmount = 0;\\n\\n        emit Withdraw(msg.sender, withdrawableAmount);\\n\\n        paymentTokenERC20.transfer(msg.sender, withdrawableAmount);\\n    }\\n\\n    function emergencyWithdraw() public onlyOwner {\\n        IERC20 paymentTokenERC20 = IERC20(i_USDC_ADDRESS);\\n        uint256 withdrawableAmount = paymentTokenERC20.balanceOf(address(this));\\n\\n        emit EmergencyWithdraw(msg.sender, withdrawableAmount);\\n\\n        paymentTokenERC20.transfer(msg.sender, withdrawableAmount);\\n    }\\n\\n    function getQuestionerToAnswererToQAs(\\n        address questioner,\\n        address answerer,\\n        uint256 index\\n    )\\n        public\\n        view\\n        returns (\\n            string memory,\\n            string memory,\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (\\n            questionerToAnswererToQAs[questioner][answerer][index].question,\\n            questionerToAnswererToQAs[questioner][answerer][index].answer,\\n            questionerToAnswererToQAs[questioner][answerer][index].answered,\\n            questionerToAnswererToQAs[questioner][answerer][index].bounty,\\n            questionerToAnswererToQAs[questioner][answerer][index].id,\\n            questionerToAnswererToQAs[questioner][answerer][index].expiryDate\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x3d14e45692d29ca8b379072325981225318ca024259c26d803c94a2fdfbdb700\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620027fc380380620027fc8339818101604052810190620000379190620001c8565b620000576200004b6200009260201b60201c565b6200009a60201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050620001fa565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001908262000163565b9050919050565b620001a28162000183565b8114620001ae57600080fd5b50565b600081519050620001c28162000197565b92915050565b600060208284031215620001e157620001e06200015e565b5b6000620001f184828501620001b1565b91505092915050565b6080516125d16200022b6000396000818161026c0152818161076401528181610fc5015261124001526125d16000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806380751c1d1161007157806380751c1d146101165780638da5cb5b14610132578063db2e21bc14610150578063e2913c6b1461015a578063f2fde38b1461018d578063fc5c8298146101a9576100a9565b8063018070f8146100ae578063043a8d46146100b85780630e18ab05146100d4578063715018a6146100f05780637b74b833146100fa575b600080fd5b6100b66101de565b005b6100d260048036038101906100cd9190611d22565b61036e565b005b6100ee60048036038101906100e99190611dc7565b610606565b005b6100f8610d25565b005b610114600480360381019061010f9190611e4f565b610d39565b005b610130600480360381019061012b9190611ec3565b6110d8565b005b61013a61120b565b6040516101479190611f32565b60405180910390f35b610158611234565b005b610174600480360381019061016f9190611f4d565b6113c4565b604051610184949392919061203d565b60405180910390f35b6101a760048036038101906101a29190611f4d565b611489565b005b6101c360048036038101906101be9190612089565b61150d565b6040516101d5969594939291906120dc565b60405180910390f35b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600201541161025f576040517f803b3bd600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160020154905060007f0000000000000000000000000000000000000000000000000000000000000000905060008360020181905550813373ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436460405160405180910390a38073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b815260040161031692919061214b565b602060405180830381600087803b15801561033057600080fd5b505af1158015610344573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036891906121a0565b50505050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508181805490501161042a576040517e4095f600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80828154811061043d5761043c6121cd565b5b906000526020600020906006020160020160009054906101000a900460ff1615610493576040517f894c1a4700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b428183815481106104a7576104a66121cd565b5b906000526020600020906006020160050154116104f0576040517f858c426000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61012c426104fe919061222b565b818381548110610511576105106121cd565b5b9060005260206000209060060201600501541161055a576040517f513c0f6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001426105679190612281565b81838154811061057a576105796121cd565b5b906000526020600020906006020160050181905550818373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f1aae613553f1b3a322d39d736a4d220aade6b1fdd44e7dd0b20c17329bab6d966001426105ec9190612281565b6040516105f991906122b5565b60405180910390a4505050565b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff161515151581526020016001820154815260200160028201548152602001600382018054610691906122ff565b80601f01602080910402602001604051908101604052809291908181526020018280546106bd906122ff565b801561070a5780601f106106df5761010080835404028352916020019161070a565b820191906000526020600020905b8154815290600101906020018083116106ed57829003601f168201915b5050505050815250509050806000015180156107295750806020015183105b15610760576040517f97c28dc200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000009050838173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b81526004016107c1929190612331565b60206040518083038186803b1580156107d957600080fd5b505afa1580156107ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610811919061236f565b1015610849576040517fcefbc98e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b428311610882576040517f6498958000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610aaf57838290600052602060002090600602016040518060c0016040529081600082018054610953906122ff565b80601f016020809104026020016040519081016040528092919081815260200182805461097f906122ff565b80156109cc5780601f106109a1576101008083540402835291602001916109cc565b820191906000526020600020905b8154815290600101906020018083116109af57829003601f168201915b505050505081526020016001820180546109e5906122ff565b80601f0160208091040260200160405190810160405280929190818152602001828054610a11906122ff565b8015610a5e5780601f10610a3357610100808354040283529160200191610a5e565b820191906000526020600020905b815481529060010190602001808311610a4157829003601f168201915b505050505081526020016002820160009054906101000a900460ff16151515158152602001600382015481526020016004820154815260200160058201548152505081526020019060010190610920565b50505050905060006040518060c001604052808a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152602001604051806020016040528060008152508152602001600015158152602001878152602001600081526020018681525090506000825114610b885760018260018451610b579190612281565b81518110610b6857610b676121cd565b5b602002602001015160800151610b7e919061222b565b8160800181815250505b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150506001900390600052602060002090600602016000909190919091506000820151816000019080519060200190610c4a929190611b5b565b506020820151816001019080519060200190610c67929190611b5b565b5060408201518160020160006101000a81548160ff021916908315150217905550606082015181600301556080820151816004015560a08201518160050155505080608001518773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f6039043947aae59803ebb3eb6e07aeca45585cf98f551135b2412e8f25b4fadd89428e8e8c604051610d129594939291906123d8565b60405180910390a4505050505050505050565b610d2d611a11565b610d376000611a8f565b565b6000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905083818054905011610df5576040517e4095f600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b808481548110610e0857610e076121cd565b5b906000526020600020906006020160020160009054906101000a900460ff1615610e5e576040517f894c1a4700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42818581548110610e7257610e716121cd565b5b90600052602060002090600602016005015411610ebb576040517f858c426000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8282828681548110610ed057610ecf6121cd565b5b90600052602060002090600602016001019190610eee929190611be1565b506001818581548110610f0457610f036121cd565b5b906000526020600020906006020160020160006101000a81548160ff0219169083151502179055506000818581548110610f4157610f406121cd565b5b9060005260206000209060060201600301549050843373ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f6bd44ed2453a257d2a02f8437dd1009cb4790852a0581d9d2214324c0feb30bf84428989604051610fb99493929190612426565b60405180910390a460007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff166323b872dd8830856040518463ffffffff1660e01b815260040161102393929190612466565b602060405180830381600087803b15801561103d57600080fd5b505af1158015611051573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107591906121a0565b5081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008282546110c8919061222b565b9250508190555050505050505050565b6000831015611113576040517ffcc286a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690831515021790555082600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055508181600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003019190611205929190611be1565b50505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61123c611a11565b60007f0000000000000000000000000000000000000000000000000000000000000000905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161129c9190611f32565b60206040518083038186803b1580156112b457600080fd5b505afa1580156112c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ec919061236f565b9050803373ffffffffffffffffffffffffffffffffffffffff167f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd969560405160405180910390a38173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161136d92919061214b565b602060405180830381600087803b15801561138757600080fd5b505af115801561139b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bf91906121a0565b505050565b60016020528060005260406000206000915090508060000160009054906101000a900460ff1690806001015490806002015490806003018054611406906122ff565b80601f0160208091040260200160405190810160405280929190818152602001828054611432906122ff565b801561147f5780601f106114545761010080835404028352916020019161147f565b820191906000526020600020905b81548152906001019060200180831161146257829003601f168201915b5050505050905084565b611491611a11565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611501576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f89061250f565b60405180910390fd5b61150a81611a8f565b50565b606080600080600080600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002087815481106115a4576115a36121cd565b5b9060005260206000209060060201600001600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208881548110611643576116426121cd565b5b9060005260206000209060060201600101600260008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002089815481106116e2576116e16121cd565b5b906000526020600020906006020160020160009054906101000a900460ff16600260008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208a8154811061178f5761178e6121cd565b5b906000526020600020906006020160030154600260008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208b8154811061182f5761182e6121cd565b5b906000526020600020906006020160040154600260008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208c815481106118cf576118ce6121cd565b5b9060005260206000209060060201600501548580546118ed906122ff565b80601f0160208091040260200160405190810160405280929190818152602001828054611919906122ff565b80156119665780601f1061193b57610100808354040283529160200191611966565b820191906000526020600020905b81548152906001019060200180831161194957829003601f168201915b50505050509550848054611979906122ff565b80601f01602080910402602001604051908101604052809291908181526020018280546119a5906122ff565b80156119f25780601f106119c7576101008083540402835291602001916119f2565b820191906000526020600020905b8154815290600101906020018083116119d557829003601f168201915b5050505050945095509550955095509550955093975093979195509350565b611a19611b53565b73ffffffffffffffffffffffffffffffffffffffff16611a3761120b565b73ffffffffffffffffffffffffffffffffffffffff1614611a8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a849061257b565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b828054611b67906122ff565b90600052602060002090601f016020900481019282611b895760008555611bd0565b82601f10611ba257805160ff1916838001178555611bd0565b82800160010185558215611bd0579182015b82811115611bcf578251825591602001919060010190611bb4565b5b509050611bdd9190611c67565b5090565b828054611bed906122ff565b90600052602060002090601f016020900481019282611c0f5760008555611c56565b82601f10611c2857803560ff1916838001178555611c56565b82800160010185558215611c56579182015b82811115611c55578235825591602001919060010190611c3a565b5b509050611c639190611c67565b5090565b5b80821115611c80576000816000905550600101611c68565b5090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611cb982611c8e565b9050919050565b611cc981611cae565b8114611cd457600080fd5b50565b600081359050611ce681611cc0565b92915050565b6000819050919050565b611cff81611cec565b8114611d0a57600080fd5b50565b600081359050611d1c81611cf6565b92915050565b60008060408385031215611d3957611d38611c84565b5b6000611d4785828601611cd7565b9250506020611d5885828601611d0d565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f840112611d8757611d86611d62565b5b8235905067ffffffffffffffff811115611da457611da3611d67565b5b602083019150836001820283011115611dc057611dbf611d6c565b5b9250929050565b600080600080600060808688031215611de357611de2611c84565b5b600086013567ffffffffffffffff811115611e0157611e00611c89565b5b611e0d88828901611d71565b95509550506020611e2088828901611cd7565b9350506040611e3188828901611d0d565b9250506060611e4288828901611d0d565b9150509295509295909350565b60008060008060608587031215611e6957611e68611c84565b5b6000611e7787828801611cd7565b9450506020611e8887828801611d0d565b935050604085013567ffffffffffffffff811115611ea957611ea8611c89565b5b611eb587828801611d71565b925092505092959194509250565b600080600060408486031215611edc57611edb611c84565b5b6000611eea86828701611d0d565b935050602084013567ffffffffffffffff811115611f0b57611f0a611c89565b5b611f1786828701611d71565b92509250509250925092565b611f2c81611cae565b82525050565b6000602082019050611f476000830184611f23565b92915050565b600060208284031215611f6357611f62611c84565b5b6000611f7184828501611cd7565b91505092915050565b60008115159050919050565b611f8f81611f7a565b82525050565b611f9e81611cec565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611fde578082015181840152602081019050611fc3565b83811115611fed576000848401525b50505050565b6000601f19601f8301169050919050565b600061200f82611fa4565b6120198185611faf565b9350612029818560208601611fc0565b61203281611ff3565b840191505092915050565b60006080820190506120526000830187611f86565b61205f6020830186611f95565b61206c6040830185611f95565b818103606083015261207e8184612004565b905095945050505050565b6000806000606084860312156120a2576120a1611c84565b5b60006120b086828701611cd7565b93505060206120c186828701611cd7565b92505060406120d286828701611d0d565b9150509250925092565b600060c08201905081810360008301526120f68189612004565b9050818103602083015261210a8188612004565b90506121196040830187611f86565b6121266060830186611f95565b6121336080830185611f95565b61214060a0830184611f95565b979650505050505050565b60006040820190506121606000830185611f23565b61216d6020830184611f95565b9392505050565b61217d81611f7a565b811461218857600080fd5b50565b60008151905061219a81612174565b92915050565b6000602082840312156121b6576121b5611c84565b5b60006121c48482850161218b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061223682611cec565b915061224183611cec565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612276576122756121fc565b5b828201905092915050565b600061228c82611cec565b915061229783611cec565b9250828210156122aa576122a96121fc565b5b828203905092915050565b60006020820190506122ca6000830184611f95565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061231757607f821691505b6020821081141561232b5761232a6122d0565b5b50919050565b60006040820190506123466000830185611f23565b6123536020830184611f23565b9392505050565b60008151905061236981611cf6565b92915050565b60006020828403121561238557612384611c84565b5b60006123938482850161235a565b91505092915050565b82818337600083830152505050565b60006123b78385611faf565b93506123c483858461239c565b6123cd83611ff3565b840190509392505050565b60006080820190506123ed6000830188611f95565b6123fa6020830187611f95565b818103604083015261240d8185876123ab565b905061241c6060830184611f95565b9695505050505050565b600060608201905061243b6000830187611f95565b6124486020830186611f95565b818103604083015261245b8184866123ab565b905095945050505050565b600060608201905061247b6000830186611f23565b6124886020830185611f23565b6124956040830184611f95565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006124f9602683611faf565b91506125048261249d565b604082019050919050565b60006020820190508181036000830152612528816124ec565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612565602083611faf565b91506125708261252f565b602082019050919050565b6000602082019050818103600083015261259481612558565b905091905056fea2646970667358221220dd5eb6278fa6fe620cdc56baa6ce6d654d1edfe7d6d714671824b2247aeebdca64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c806380751c1d1161007157806380751c1d146101165780638da5cb5b14610132578063db2e21bc14610150578063e2913c6b1461015a578063f2fde38b1461018d578063fc5c8298146101a9576100a9565b8063018070f8146100ae578063043a8d46146100b85780630e18ab05146100d4578063715018a6146100f05780637b74b833146100fa575b600080fd5b6100b66101de565b005b6100d260048036038101906100cd9190611d22565b61036e565b005b6100ee60048036038101906100e99190611dc7565b610606565b005b6100f8610d25565b005b610114600480360381019061010f9190611e4f565b610d39565b005b610130600480360381019061012b9190611ec3565b6110d8565b005b61013a61120b565b6040516101479190611f32565b60405180910390f35b610158611234565b005b610174600480360381019061016f9190611f4d565b6113c4565b604051610184949392919061203d565b60405180910390f35b6101a760048036038101906101a29190611f4d565b611489565b005b6101c360048036038101906101be9190612089565b61150d565b6040516101d5969594939291906120dc565b60405180910390f35b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600201541161025f576040517f803b3bd600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160020154905060007f0000000000000000000000000000000000000000000000000000000000000000905060008360020181905550813373ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436460405160405180910390a38073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b815260040161031692919061214b565b602060405180830381600087803b15801561033057600080fd5b505af1158015610344573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036891906121a0565b50505050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508181805490501161042a576040517e4095f600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80828154811061043d5761043c6121cd565b5b906000526020600020906006020160020160009054906101000a900460ff1615610493576040517f894c1a4700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b428183815481106104a7576104a66121cd565b5b906000526020600020906006020160050154116104f0576040517f858c426000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61012c426104fe919061222b565b818381548110610511576105106121cd565b5b9060005260206000209060060201600501541161055a576040517f513c0f6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001426105679190612281565b81838154811061057a576105796121cd565b5b906000526020600020906006020160050181905550818373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f1aae613553f1b3a322d39d736a4d220aade6b1fdd44e7dd0b20c17329bab6d966001426105ec9190612281565b6040516105f991906122b5565b60405180910390a4505050565b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff161515151581526020016001820154815260200160028201548152602001600382018054610691906122ff565b80601f01602080910402602001604051908101604052809291908181526020018280546106bd906122ff565b801561070a5780601f106106df5761010080835404028352916020019161070a565b820191906000526020600020905b8154815290600101906020018083116106ed57829003601f168201915b5050505050815250509050806000015180156107295750806020015183105b15610760576040517f97c28dc200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000009050838173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b81526004016107c1929190612331565b60206040518083038186803b1580156107d957600080fd5b505afa1580156107ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610811919061236f565b1015610849576040517fcefbc98e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b428311610882576040517f6498958000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610aaf57838290600052602060002090600602016040518060c0016040529081600082018054610953906122ff565b80601f016020809104026020016040519081016040528092919081815260200182805461097f906122ff565b80156109cc5780601f106109a1576101008083540402835291602001916109cc565b820191906000526020600020905b8154815290600101906020018083116109af57829003601f168201915b505050505081526020016001820180546109e5906122ff565b80601f0160208091040260200160405190810160405280929190818152602001828054610a11906122ff565b8015610a5e5780601f10610a3357610100808354040283529160200191610a5e565b820191906000526020600020905b815481529060010190602001808311610a4157829003601f168201915b505050505081526020016002820160009054906101000a900460ff16151515158152602001600382015481526020016004820154815260200160058201548152505081526020019060010190610920565b50505050905060006040518060c001604052808a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152602001604051806020016040528060008152508152602001600015158152602001878152602001600081526020018681525090506000825114610b885760018260018451610b579190612281565b81518110610b6857610b676121cd565b5b602002602001015160800151610b7e919061222b565b8160800181815250505b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150506001900390600052602060002090600602016000909190919091506000820151816000019080519060200190610c4a929190611b5b565b506020820151816001019080519060200190610c67929190611b5b565b5060408201518160020160006101000a81548160ff021916908315150217905550606082015181600301556080820151816004015560a08201518160050155505080608001518773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f6039043947aae59803ebb3eb6e07aeca45585cf98f551135b2412e8f25b4fadd89428e8e8c604051610d129594939291906123d8565b60405180910390a4505050505050505050565b610d2d611a11565b610d376000611a8f565b565b6000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905083818054905011610df5576040517e4095f600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b808481548110610e0857610e076121cd565b5b906000526020600020906006020160020160009054906101000a900460ff1615610e5e576040517f894c1a4700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42818581548110610e7257610e716121cd565b5b90600052602060002090600602016005015411610ebb576040517f858c426000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8282828681548110610ed057610ecf6121cd565b5b90600052602060002090600602016001019190610eee929190611be1565b506001818581548110610f0457610f036121cd565b5b906000526020600020906006020160020160006101000a81548160ff0219169083151502179055506000818581548110610f4157610f406121cd565b5b9060005260206000209060060201600301549050843373ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f6bd44ed2453a257d2a02f8437dd1009cb4790852a0581d9d2214324c0feb30bf84428989604051610fb99493929190612426565b60405180910390a460007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff166323b872dd8830856040518463ffffffff1660e01b815260040161102393929190612466565b602060405180830381600087803b15801561103d57600080fd5b505af1158015611051573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107591906121a0565b5081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008282546110c8919061222b565b9250508190555050505050505050565b6000831015611113576040517ffcc286a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690831515021790555082600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055508181600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003019190611205929190611be1565b50505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61123c611a11565b60007f0000000000000000000000000000000000000000000000000000000000000000905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161129c9190611f32565b60206040518083038186803b1580156112b457600080fd5b505afa1580156112c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ec919061236f565b9050803373ffffffffffffffffffffffffffffffffffffffff167f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd969560405160405180910390a38173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161136d92919061214b565b602060405180830381600087803b15801561138757600080fd5b505af115801561139b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bf91906121a0565b505050565b60016020528060005260406000206000915090508060000160009054906101000a900460ff1690806001015490806002015490806003018054611406906122ff565b80601f0160208091040260200160405190810160405280929190818152602001828054611432906122ff565b801561147f5780601f106114545761010080835404028352916020019161147f565b820191906000526020600020905b81548152906001019060200180831161146257829003601f168201915b5050505050905084565b611491611a11565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611501576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f89061250f565b60405180910390fd5b61150a81611a8f565b50565b606080600080600080600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002087815481106115a4576115a36121cd565b5b9060005260206000209060060201600001600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208881548110611643576116426121cd565b5b9060005260206000209060060201600101600260008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002089815481106116e2576116e16121cd565b5b906000526020600020906006020160020160009054906101000a900460ff16600260008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208a8154811061178f5761178e6121cd565b5b906000526020600020906006020160030154600260008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208b8154811061182f5761182e6121cd565b5b906000526020600020906006020160040154600260008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208c815481106118cf576118ce6121cd565b5b9060005260206000209060060201600501548580546118ed906122ff565b80601f0160208091040260200160405190810160405280929190818152602001828054611919906122ff565b80156119665780601f1061193b57610100808354040283529160200191611966565b820191906000526020600020905b81548152906001019060200180831161194957829003601f168201915b50505050509550848054611979906122ff565b80601f01602080910402602001604051908101604052809291908181526020018280546119a5906122ff565b80156119f25780601f106119c7576101008083540402835291602001916119f2565b820191906000526020600020905b8154815290600101906020018083116119d557829003601f168201915b5050505050945095509550955095509550955093975093979195509350565b611a19611b53565b73ffffffffffffffffffffffffffffffffffffffff16611a3761120b565b73ffffffffffffffffffffffffffffffffffffffff1614611a8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a849061257b565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b828054611b67906122ff565b90600052602060002090601f016020900481019282611b895760008555611bd0565b82601f10611ba257805160ff1916838001178555611bd0565b82800160010185558215611bd0579182015b82811115611bcf578251825591602001919060010190611bb4565b5b509050611bdd9190611c67565b5090565b828054611bed906122ff565b90600052602060002090601f016020900481019282611c0f5760008555611c56565b82601f10611c2857803560ff1916838001178555611c56565b82800160010185558215611c56579182015b82811115611c55578235825591602001919060010190611c3a565b5b509050611c639190611c67565b5090565b5b80821115611c80576000816000905550600101611c68565b5090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611cb982611c8e565b9050919050565b611cc981611cae565b8114611cd457600080fd5b50565b600081359050611ce681611cc0565b92915050565b6000819050919050565b611cff81611cec565b8114611d0a57600080fd5b50565b600081359050611d1c81611cf6565b92915050565b60008060408385031215611d3957611d38611c84565b5b6000611d4785828601611cd7565b9250506020611d5885828601611d0d565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f840112611d8757611d86611d62565b5b8235905067ffffffffffffffff811115611da457611da3611d67565b5b602083019150836001820283011115611dc057611dbf611d6c565b5b9250929050565b600080600080600060808688031215611de357611de2611c84565b5b600086013567ffffffffffffffff811115611e0157611e00611c89565b5b611e0d88828901611d71565b95509550506020611e2088828901611cd7565b9350506040611e3188828901611d0d565b9250506060611e4288828901611d0d565b9150509295509295909350565b60008060008060608587031215611e6957611e68611c84565b5b6000611e7787828801611cd7565b9450506020611e8887828801611d0d565b935050604085013567ffffffffffffffff811115611ea957611ea8611c89565b5b611eb587828801611d71565b925092505092959194509250565b600080600060408486031215611edc57611edb611c84565b5b6000611eea86828701611d0d565b935050602084013567ffffffffffffffff811115611f0b57611f0a611c89565b5b611f1786828701611d71565b92509250509250925092565b611f2c81611cae565b82525050565b6000602082019050611f476000830184611f23565b92915050565b600060208284031215611f6357611f62611c84565b5b6000611f7184828501611cd7565b91505092915050565b60008115159050919050565b611f8f81611f7a565b82525050565b611f9e81611cec565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611fde578082015181840152602081019050611fc3565b83811115611fed576000848401525b50505050565b6000601f19601f8301169050919050565b600061200f82611fa4565b6120198185611faf565b9350612029818560208601611fc0565b61203281611ff3565b840191505092915050565b60006080820190506120526000830187611f86565b61205f6020830186611f95565b61206c6040830185611f95565b818103606083015261207e8184612004565b905095945050505050565b6000806000606084860312156120a2576120a1611c84565b5b60006120b086828701611cd7565b93505060206120c186828701611cd7565b92505060406120d286828701611d0d565b9150509250925092565b600060c08201905081810360008301526120f68189612004565b9050818103602083015261210a8188612004565b90506121196040830187611f86565b6121266060830186611f95565b6121336080830185611f95565b61214060a0830184611f95565b979650505050505050565b60006040820190506121606000830185611f23565b61216d6020830184611f95565b9392505050565b61217d81611f7a565b811461218857600080fd5b50565b60008151905061219a81612174565b92915050565b6000602082840312156121b6576121b5611c84565b5b60006121c48482850161218b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061223682611cec565b915061224183611cec565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612276576122756121fc565b5b828201905092915050565b600061228c82611cec565b915061229783611cec565b9250828210156122aa576122a96121fc565b5b828203905092915050565b60006020820190506122ca6000830184611f95565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061231757607f821691505b6020821081141561232b5761232a6122d0565b5b50919050565b60006040820190506123466000830185611f23565b6123536020830184611f23565b9392505050565b60008151905061236981611cf6565b92915050565b60006020828403121561238557612384611c84565b5b60006123938482850161235a565b91505092915050565b82818337600083830152505050565b60006123b78385611faf565b93506123c483858461239c565b6123cd83611ff3565b840190509392505050565b60006080820190506123ed6000830188611f95565b6123fa6020830187611f95565b818103604083015261240d8185876123ab565b905061241c6060830184611f95565b9695505050505050565b600060608201905061243b6000830187611f95565b6124486020830186611f95565b818103604083015261245b8184866123ab565b905095945050505050565b600060608201905061247b6000830186611f23565b6124886020830185611f23565b6124956040830184611f95565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006124f9602683611faf565b91506125048261249d565b604082019050919050565b60006020820190508181036000830152612528816124ec565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612565602083611faf565b91506125708261252f565b602082019050919050565b6000602082019050818103600083015261259481612558565b905091905056fea2646970667358221220dd5eb6278fa6fe620cdc56baa6ce6d654d1edfe7d6d714671824b2247aeebdca64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/QuestionAndAnswer.sol:QuestionAndAnswer",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 957,
        "contract": "contracts/QuestionAndAnswer.sol:QuestionAndAnswer",
        "label": "answererToSettings",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(AnswererSettings)939_storage)"
      },
      {
        "astId": 965,
        "contract": "contracts/QuestionAndAnswer.sol:QuestionAndAnswer",
        "label": "questionerToAnswererToQAs",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_struct(QuestionAnswerDetails)952_storage)dyn_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(QuestionAnswerDetails)952_storage)dyn_storage": {
        "base": "t_struct(QuestionAnswerDetails)952_storage",
        "encoding": "dynamic_array",
        "label": "struct QuestionAndAnswer.QuestionAnswerDetails[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(QuestionAnswerDetails)952_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct QuestionAndAnswer.QuestionAnswerDetails[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(QuestionAnswerDetails)952_storage)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_struct(QuestionAnswerDetails)952_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct QuestionAndAnswer.QuestionAnswerDetails[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_struct(QuestionAnswerDetails)952_storage)dyn_storage)"
      },
      "t_mapping(t_address,t_struct(AnswererSettings)939_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct QuestionAndAnswer.AnswererSettings)",
        "numberOfBytes": "32",
        "value": "t_struct(AnswererSettings)939_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AnswererSettings)939_storage": {
        "encoding": "inplace",
        "label": "struct QuestionAndAnswer.AnswererSettings",
        "members": [
          {
            "astId": 932,
            "contract": "contracts/QuestionAndAnswer.sol:QuestionAndAnswer",
            "label": "populated",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 934,
            "contract": "contracts/QuestionAndAnswer.sol:QuestionAndAnswer",
            "label": "priceMinimum",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 936,
            "contract": "contracts/QuestionAndAnswer.sol:QuestionAndAnswer",
            "label": "withdrawableAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 938,
            "contract": "contracts/QuestionAndAnswer.sol:QuestionAndAnswer",
            "label": "interests",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(QuestionAnswerDetails)952_storage": {
        "encoding": "inplace",
        "label": "struct QuestionAndAnswer.QuestionAnswerDetails",
        "members": [
          {
            "astId": 941,
            "contract": "contracts/QuestionAndAnswer.sol:QuestionAndAnswer",
            "label": "question",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 943,
            "contract": "contracts/QuestionAndAnswer.sol:QuestionAndAnswer",
            "label": "answer",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 945,
            "contract": "contracts/QuestionAndAnswer.sol:QuestionAndAnswer",
            "label": "answered",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 947,
            "contract": "contracts/QuestionAndAnswer.sol:QuestionAndAnswer",
            "label": "bounty",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 949,
            "contract": "contracts/QuestionAndAnswer.sol:QuestionAndAnswer",
            "label": "id",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 951,
            "contract": "contracts/QuestionAndAnswer.sol:QuestionAndAnswer",
            "label": "expiryDate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}